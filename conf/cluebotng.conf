# CluebotNG functions based on an "Edit Pipeline".  An edit is input
# to the pipeline, and a set of individual "processors" in the pipeline
# act on the edit, in order.  In the pipeline, an edit consists of a
# set of properties, each with a name and a value.  The value can be
# an integer, floating point, string, word set, or a few other things.
# Typically, a processor will read some properties and generate others.
#
# A processor is defined in a config file, along with any configuration
# settings specific to that processor.  Each processor is backed with
# a coded "module" which is part of the bot's source code.  Some things
# may require creating a new coded module, but many things can be done
# with existing module.  Multiple different processors can be created
# that use the same module, with different configuration settings.
#
# Edit processors are grouped together in chains.  A chain is a list of
# edit processors that are to be executed in order.  A chain can also
# include names of other chains to "nest".  A special case is when a
# module does not require any configuration, or has a default configuration.
# In this case, chains can include the module name instead of the processor
# name, and the default configuration will be used.  Chains are specified
# in the "chains" block of the main configuration file.
#
# When running cluebotng, it gets edits from a given source (currently, either
# reading them from an XML file, or accepting them from a network socket) and
# runs them through a given primary chain, specified on the command line.  In
# the case of reading edits from a file, processors in the chain are responsible
# for generating output.  When reading edits from a network socket, a response
# is sent for each edit automatically, consisting of several properties, after
# the edit pipeline is run.
#
# Edit processors are declared in their own blocks, named with the name
# of the processor.  The edit processor should contain a "module" directive,
# specifying the name of the module the processor uses.  A special case is
# where the edit processor has the same name as the module.  In this case,
# no module directive is required, and the processor block specifies the
# default configuration for the module.  Another special case is a processor
# using the "chain" module.  The "chain" module creates a chain that acts
# as a processor (ie, it doesn't have to be specified in the main "chains"
# block).  However, chains specified in this way as a processor cannot be
# used as primary chains when running cluebotng.
#
# Edit processors can be divided into three main groups.  Outputs, Metrics,
# and Filters.  These are not formal distinctions, it's just convenient to
# think about them like this.  Output processors read properties and do not
# generate any properties, but generate some sort of output, such as a message
# to stdout, or a file.  Metrics read data properties (such as a word set or
# text) and perform various statistics on them.  Outputs are usually ints or
# floats.  Filters read a property and generate another property that's some
# kind of representation of the original property - not a statistic.  Outputs
# are usually strings or word sets.
#
# Descriptions of individual modules, and some other configuration blocks,
# are in various other config files here.

# Main/Primary chain specifications
# These are the chains that can be run as a pipeline from the command line.
chains:
{
# Primary chains
	live_run = ( "static_processors", "run_main_ann", "score_aggregator", "live_vandalism_threshold", "live_outputs" );
	trial_run = ( "static_processors", "run_main_ann", "score_aggregator", "trial_outputs" );
	ann_train = ( "static_processors", "make_ann_training_data", "train_outputs" );
	bayes_train = ( "static_processors", "make_bayes_training_data", "train_outputs" );
# Aliases
	create_ann_train = ( "ann_train" );
	create_bayes_train = ( "bayes_train" );
};

# When reading edits from a file (not from the network), multiple threads
# are used to process multiple edits at once.  This specifies how many
# threads are spawned to process the edits.
threads = 16;
# When reading edits from a network socket, it listens on a port, and for
# each incoming connection, spawns a parallel thread.  This specifies the
# port to listen on.
listen_port = 3565;

# Contains miscellanious other configuration information other than processors
@include "conf/misc.conf"
# Contains critical processors applied at the end of the whole pipeline
@include "conf/main_running.conf"
# Contains processors that generate output
@include "conf/outputs.conf"
# Contains elementary processors that generate statistics on the edit (and transform the text in predictable ways)
@include "conf/static_processing.conf"
# Contains neural network and bayesian processors that must be trained before being used
@include "conf/trained_processing.conf"

