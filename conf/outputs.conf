########## Training Outputs ##########

# Outputs to use when doing a training run.  Since training files are
# generated by their respective modules, this just prints a progress bar
# to stdout.
train_outputs:
{
	module = "chain";
	chain = (
		"print_progress"
	);
};


########## Trial Outputs ##########

# Output processors when doing a trial run.  Currently, this generates
# the trial report, generates a details file, generates a debug file,
# and prints a progress bar.
trial_outputs:
{
	module = "chain";
	chain = (
		"trial_run_report",
		"trial_run_details",
		"trial_run_debug",
		"print_progress"
	);
};

# The "trial_run_report" module (this is the default configuration for
# a module of the same name) generates several report files from a trial
# run.  It generates a report file (an overview of the results) and a
# threshold table file (which is a space-separated table of thresholds
# versus the false positive and correct negative rates at that threshold).
#
# The input properties are specified in "isvandprop" (the bool property
# specifying whether or not the edit is *ACTUALLY* vandalism), "score"
# (the float property giving the overall score of the edit), and "id"
# (the string property which is the ID of the edit).  Filenames are specified
# in the "report" and "threshold_table" options.  If "misclassified_file_prefix"
# is given, it also generates two files called "falsepositives.txt" and
# "falsenegatives.txt" containing a list of edits that were incorrectly classified.
# The "misclassified_file_prefix" specifies the directory to place these in.
#
# The report file contains two sets of information.  One set based on a given
# threshold (given by the "threshold" option), and one set based on a threshold
# calculated to generate at or below the given false positive rate (specified
# by the "false_positive_rate" option).  If "false_positive_rate" is specified,
# the misclassified edits files contain information based on the calculated
# threshold.  Otherwise, the threshold specified by "threshold" is used.
#
# The "threshold_table_interval" specifies the interval between thresholds to
# use when generating the threshold table.
trial_run_report:
{
	isvandprop = "isvandalism";
	score = "score";
	id = "editid";
	
	report = "trialreport/report.txt";
	threshold = 0.5;
	false_positive_rate = 0.0025;
	
	misclassified_file_prefix = "trialreport/";
	
	threshold_table = "trialreport/thresholdtable.txt";
	threshold_table_interval = 0.0005;
};

# The "write_properties" module dumps a list of properties for each edit
# into a file.
trial_run_details:
{
	module = "write_properties";
	filename = "trialreport/details.txt";
	properties:
	(
		"editid",
		"isvandalism",
		"score",
		"main_bayes_score",
		"main_ann_score"
	);
};

# The "edit_dump" module dumps XML for an edit to a file.  Most, but not
# all, property types are supported.  Not all properties can be loaded back
# in as input.  If "maxlen" is specified, the length of each property is
# capped at that length of characters.  This can be used to generate debug
# data, without using tons and tons of disk space.
trial_run_debug:
{
	module = "edit_dump";
	maxlen = 100;
	filename = "trialreport/debug.xml";
};


########## Live Outputs ##########

# Outputs (other than to the network) when running live
# No progress bar, just log.
live_outputs:
{
	module = "chain";
	chain = (
		"live_network_log"
	);
};

live_network_log:
{
	module = "write_properties";
	filename = "data/livelog.txt";
	properties:
	(
		"editid",
		"think_vandalism",
		"score",
		"main_bayes_score",
		"two_bayes_score"
	);
};



########## Misc Output Modules ##########

dump_stdout:
{
	module = "edit_dump";
	filename = "/dev/stdout";
};

# Default configuration for progress bar module.
# "interval" option is number of edits in between redrawing bar.
# Too small, and performance will be hurt.
print_progress:
{
	interval = 3;
};

dump_file:
{
	module = "edit_dump";
	maxlen = 30;
	filename = "/tmp/edit_dump.xml";
};

dump_file_full:
{
	module = "edit_dump";
	filename = "/tmp/edit_dump.xml";
};
