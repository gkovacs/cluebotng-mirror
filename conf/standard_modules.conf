# Module to dump raw XML to stdout
dump_stdout:
{
	module = "edit_dump";
	filename = "/dev/stdout";
};

standard_raw_character_counts:
{
	module = "character_counts";
	metrics:
	{
		charcount_period = ".";
		charcount_comma = ",";
		charcount_newline="
";
		charcount_space = " ";
		charcount_at = "@";
		charcount_exclamationpoint = "!";
		charcount_qmark = "?";
		charcount_wikichar = "|=";
		charcount_bracket = "[]{}";
		charcount_rawcapitals = "QWERTYUIOPASDFGHJKLZXCVBNM";
		charcount_rawlowercase = "qwertyuiopasdfghjklzxcvbnm";
		charcount_rawdigit = "0123456789";
		charcount_quote = "\"";
	};
	inputs:
	{
		current_text = "current_";
		previous_text = "previous_";
	};
};

wikimarkup_count:
{
	module = "posix_regex_search";
	metrics:
	{
		wikimarkup_formatting_count:
		(
			{ flags = "E"; regex = "'{2,5}"; },
			{ flags = "E"; regex = "={2,5}"; },
			{ flags = "E"; regex = "-{4,10}"; },
			{ flags = "E"; regex = "^:"; },
			{ flags = "E"; regex = "^\\*"; },
			{ flags = "E"; regex = "^#"; }
		);
		wikilink_count: ( { flags = "E"; regex = "\\[\\["; } );
		extlink_count: ( { flags = "E"; regex = "https?://"; } );
		html_count: ( { flags = "E"; regex = "<[^/].{0,100}>"; } );
	};
	inputs:
	{
		current_text = "current_";
		previous_text = "previous_";
	};
};

text_normalizer:
{
	module = "character_replace";
	
	find =    "QWERTYUIOPASDFGHJKLZXCVBNM/[";
	replace = "qwertyuiopasdfghjklzxcvbnm  ";
	removemulti = " ";
	keep = "1234567890qwertyuiopasdfghjklzxcvbnm ";
	
	inputs:
	{
		current_nomarkup_text = "current_normalized_text";
		previous_nomarkup_text = "previous_normalized_text";
		comment = "comment_normalized";
	};
};

comment_search:
{
	module = "fast_string_search";

	metrics:
	{
		typo: (
			"typo",
			"misspell"
		);
		
		auto: (
			"wp aes"
		);
		
		revert: (
			"reverted",
			"revert",
			"undid",
			"rvv"
		);
		
		common: (
			"copyright"
		);
	};
	
	inputs:
	{
		comment_normalized = "comment_";
	};

};

basic_regex_metrics:
{
	module = "posix_regex_search";
	metrics:
	{
		unterminated_sentence_count: ( { flags = "E"; regex = "\\n[^#:\\*][^\\n]+[A-Za-z]\n\n"; } );
		uncapitalized_sentence_count: (
			{ flags = "E"; regex = "\\. {1,4}[a-z]"; },
			{ flags = "E"; regex = "\\n\\n[a-z]"; }
		);
		punctuation_series_count: ( { flags = "E"; regex = "[!\\?]{3,}"; } );
		alpha_surrounded_punctuation_count: ( { flags = "E"; regex = "[a-zA-Z][\\.!\\?][a-zA-Z]"; } );
		alpha_surrounded_digit_count: ( { flags = "E"; regex = "[a-zA-Z][0-9][a-zA-Z]"; } );
	};
	inputs:
	{
		current_text = "current_";
		previous_text = "previous_";
	};
};

remove_markup:
{
	module = "posix_regex_replace";
	replacements:
	(
		{ flags = "E"; regex = "'{2,5}"; replace=""; },
		{ flags = "E"; regex = "={2,5}"; replace=""; },
		{ flags = "E"; regex = "-{4,10}"; replace=""; },
		{ flags = "E"; regex = "^:"; replace=""; },
		{ flags = "E"; regex = "^\\*"; replace=""; },
		{ flags = "E"; regex = "^#"; replace=""; },
		{ flags = "E"; regex = "<.{1,100}>"; replace=""; },
		{ flags = "EI"; regex = "http://[^ |\\]]{1,300}"; replace=" "; },
		{ flags = "EI"; regex = "File:[^ |\\]]{1,300}"; replace=" "; }
	);
	inputs:
	{
		current_text = "current_nomarkup_text";
		previous_text = "previous_nomarkup_text";
	};
};

standard_word_separator:
{
	module = "word_separator";
	valid_word_chars = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM0123456789";
	ignore_chars = "'-";
	
	inputs:
	{
		current_nomarkup_text = "current_raw_words";
		previous_nomarkup_text = "previous_raw_words";
	};
};

two_word_separator:
{
	module = "multi_word_separator";
	valid_word_chars = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM0123456789";
	ignore_chars = "'-";
	num_words_together = 2;
	standard_separator = " ";
	
	inputs:
	{
		current_nomarkup_text = "current_raw_2words";
		previous_nomarkup_text = "previous_raw_2words";
	};
};

standard_word_diff:
{
	module = "wordset_diff";
	current = "current_raw_words";
	previous = "previous_raw_words";
	added = "added_raw_words";
	removed = "removed_raw_words";
	# delta = "delta_raw_words";
};

two_word_diff:
{
	module = "wordset_diff";
	current = "current_raw_2words";
	previous = "previous_raw_2words";
	added = "added_raw_2words";
	removed = "removed_raw_2words";
	# delta = "delta_raw_words";
};

reused_words: {
	module = "wordset_compare";
	firstset = "previous_normalized_words";
	secondset = "added_normalized_words";
	num_common_words = "added_reused_words";
};

misc_raw_word_metrics:
{
	inputs:
	{
		current_raw_words = "current_";
		previous_raw_words = "previous_";
		added_raw_words = "added_";
		removed_raw_words = "removed_";
	};
};

word_normalizer:
{
	module = "word_character_replace";
	
	find =    "QWERTYUIOPASDFGHJKLZXCVBNM";
	replace = "qwertyuiopasdfghjklzxcvbnm";
	keep = "1234567890qwertyuiopasdfghjklzxcvbnm ";
	
	inputs:
	{
		current_raw_words = "current_normalized_words";
		previous_raw_words = "previous_normalized_words";
		added_raw_words = "added_normalized_words";
		removed_raw_words = "removed_normalized_words";
		
		current_raw_2words = "current_normalized_2words";
		previous_raw_2words = "previous_normalized_2words";
		added_raw_2words = "added_normalized_2words";
		removed_raw_2words = "removed_normalized_2words";
	};
};

word_category_finder:
{
	module = "word_finder";
	
	metrics:
	{
@include "conf/words.conf"
	};
	
	inputs:
	{
		current_normalized_words = "current_";
		previous_normalized_words = "previous_";
		added_normalized_words = "added_";
		removed_normalized_words = "removed_";
	};
};


raw_word_category_finder:
{
	module = "word_finder";
	
	metrics:
	{
@include "conf/raw_words.conf"
	};
	
	inputs:
	{
		current_raw_words = "current_";
		previous_raw_words = "previous_";
		added_raw_words = "added_";
		removed_raw_words = "removed_";
	};
};


