########## All Static Processors ##########

# Static processors are divided into three groups.
# Input processors are essentially "preprocessors" applied before anything.
# Text processors operate on string properties.
# Word processors operate on word sets.
# A word set is basically an (unordered) list of words.
static_processors:
{
	module = "chain";
	chain = (
		"input_processors",
		"text_processors",
		"word_processors"
	);
};



########## Input Processors ##########

input_processors:
{
	module = "chain";
	chain = (
		"xml_input_converter"
	);
};

# Convert UTF-8 to ASCII - some modules choke on Unicode
xml_input_converter:
{
	module = "all_prop_charset_conv";
	from = "UTF-8";
};



########## Text Processors ##########

text_processors:
{
	module = "chain";
	chain = (
		"standard_raw_character_counts",
		"wikimarkup_count",
		"remove_markup",
		"basic_regex_metrics",
		"quote_separators",
		"text_normalizer", 
		"comment_search"
	);
};

# The character_counts module counts occurrences of characters in string
# properties and creates int properties containing these occurrence counts.
# Each entry in the metrics section is the name of the output property, and
# the value is the characters to count.  If more than one character is
# specified, all characters are counted and added together.  The inputs section
# contains a list of input properties and output prefixes.  For example, this
# standard_raw_character_counts module reads the current_text and previous_text
# properties, and generates properties like: current_charcount_period,
# current_charcount_comma, current_charcount_space, ..., previous_charcount_period,
# previous_charcount_comma, ...
# This is a fast module.
standard_raw_character_counts:
{
	module = "character_counts";
	metrics:
	{
		charcount_period = ".";
		charcount_comma = ",";
		charcount_newline="
";
		charcount_space = " ";
		charcount_at = "@";
		charcount_exclamationpoint = "!";
		charcount_qmark = "?";
		charcount_wikichar = "|=";
		charcount_bracket = "[]{}";
		charcount_rawcapitals = "QWERTYUIOPASDFGHJKLZXCVBNM";
		charcount_rawlowercase = "qwertyuiopasdfghjklzxcvbnm";
		charcount_rawdigit = "0123456789";
		charcount_apostrophe = "'";
		charcount_quote = "\"";
	};
	inputs:
	{
		current_text = "current_";
		previous_text = "previous_";
	};
};

# The posix_regex_search module searches string properties for occurrences
# of a regular expression (man 7 regex).  Each metric is the sum of the
# occurrence counts of the contained regexes.  Flags can be "E", "I", or both.
# E uses extended posix regexes, and I is case-insensitive.
# This is a slow module.  Don't use posix_regex_search if you can use
# fast_string_search or a word search.
wikimarkup_count:
{
	module = "posix_regex_search";
	metrics:
	{
		wikimarkup_formatting_count:
		(
			{ flags = "E"; regex = "'{2,5}"; },
			{ flags = "E"; regex = "={2,5}"; },
			{ flags = "E"; regex = "-{4,10}"; },
			{ flags = "E"; regex = "^:"; },
			{ flags = "E"; regex = "^\\*"; },
			{ flags = "E"; regex = "^#"; }
		);
		wikimarkup_listitem_count:
		(
			{ flags = "E"; regex = "^\\*"; },
			{ flags = "E"; regex = "^#"; }
		);
		wikimarkup_indent_count: ( { flags = "E"; regex = "^:"; } );
		wikilink_count: ( { flags = "E"; regex = "\\[\\["; } );
		extlink_count: ( { flags = "E"; regex = "https?://"; } );
		html_count: ( { flags = "E"; regex = "<[^/].{0,100}>"; } );
		template_count: ( { flags = "E"; regex = "\\{\\{"; } );
		speedydel_count: ( { flags = "EI"; regex = "\\{\\{db-"; } );
		template_argument_count: (
			{ flags = "E"; regex = "\\| *\n? *[a-zA-Z0-9]{1,25} *="; }
		);
		redirect_count: ( { flags = "EI"; regex = "^# ?redirect"; } );
		disambiguation: ( { flags = "EI"; regex = "\\{\\{disambig\\}\\}"; } );
	};
	inputs:
	{
		current_text = "current_";
		previous_text = "previous_";
	};
};

# The "character_replace" module is a filter module that takes a string property and
# replaces some characters with other characters, then generates a result string property.
# Primary options are "find" and "replace".  Characters in "find" are replaced with
# corresponding characters in "replace" (notice how they're lined up).  Another option is
# "removemulti".  If multiple of any one of these characters occur in a row, they're replaced
# with a single occurrence of the character.  In this case, the string "hello   world" would
# be changed to "hello world".  Also, either the "keep" or the "remove" options can be
# given.  If the "keep" option is given, then only characters specified there are kept in the
# output, and all others are removed.  If the "remove" option is given, then characters given
# there are removed.  Operations are applied in this order: find/replace, removemulti, keep/remove.
# This is a fast module.
text_normalizer:
{
	module = "character_replace";
	
	find =    "QWERTYUIOPASDFGHJKLZXCVBNM/[";
	replace = "qwertyuiopasdfghjklzxcvbnm  ";
	removemulti = " ";
	keep = "1234567890qwertyuiopasdfghjklzxcvbnm ";
	
	inputs:
	{
		current_nomarkup_text = "current_normalized_text";
		previous_nomarkup_text = "previous_normalized_text";
		current_quote_text = "current_normalized_quote_text";
		current_noquote_text = "current_normalized_noquote_text";
		previous_quote_text = "previous_normalized_quote_text";
		previous_noquote_text = "previous_normalized_noquote_text";
		comment = "comment_normalized";
	};
};

# The quote_separator module takes a string and separates out quoted text.
# Text inside quotes is concatenated and stored in the "output_quotes" property.
# Text outside quotes is concatenated and stored in the "output_noquotes" property.
current_quote_separator:
{
	module = "quote_separator";
	input = "current_nomarkup_text";
	output_quotes = "current_quote_text";
	output_noquotes = "current_noquote_text";
};

previous_quote_separator:
{
	module = "quote_separator";
	input = "previous_nomarkup_text";
	output_quotes = "previous_quote_text";
	output_noquotes = "previous_noquote_text";
};

quote_separators:
{
	module = "chain";
	chain = ( "current_quote_separator", "previous_quote_separator" );
};

# The fast_string_search module searches for occurrences of a static string (not a regex)
# in a string.  It's much faster than posix_regex_search, and should be used if regular
# expressions are not needed.  Efficiency here does not depend on number of strings
# searched for - it depends on the max length.  So this should also not be used when you
# need to search for long strings.
comment_search:
{
	module = "fast_string_search";

	metrics:
	{
		typo: (
			"typo",
			"misspell",
			"fix"
		);
		
		auto: (
			"wp aes"
		);
		
		revert: (
			"reverted",
			"revert",
			"undid",
			"rvv"
		);
		
		common: (
			"copyright",
			"copied",
			"plagiar",
			"double redirect"
		);
	};
	
	inputs:
	{
		comment_normalized = "comment_";
	};

};

basic_regex_metrics:
{
	module = "posix_regex_search";
	metrics:
	{
		unterminated_sentence_count: ( { flags = "E"; regex = "\\n[^#:\\*][^\\n]+[A-Za-z]\n\n"; } );
		uncapitalized_sentence_count: (
			{ flags = "E"; regex = "\\. {1,4}[a-z]"; },
			{ flags = "E"; regex = "\\n\\n[a-z]"; }
		);
		punctuation_series_count: ( { flags = "E"; regex = "[!\\?]{3,}"; } );
		alpha_surrounded_punctuation_count: ( { flags = "E"; regex = "[a-zA-Z][\\.!\\?][a-zA-Z]"; } );
		alpha_surrounded_digit_count: ( { flags = "E"; regex = "[a-zA-Z][0-9][a-zA-Z]"; } );
		proper_pluralities: ( { flags = "E"; regex = "'s "; } );
	};
	inputs:
	{
		current_text = "current_";
		previous_text = "previous_";
	};
};

# posix_regex_replace replaces occurrences of a regex with a static string.
# Substitutions are not supported.
# This is a slow module.
remove_markup:
{
	module = "posix_regex_replace";
	replacements:
	(
		{ flags = "E"; regex = "'{2,5}"; replace=""; },
		{ flags = "E"; regex = "={2,5}"; replace=""; },
		{ flags = "E"; regex = "-{4,10}"; replace=""; },
		{ flags = "E"; regex = "^:"; replace=""; },
		{ flags = "E"; regex = "^\\*"; replace=""; },
		{ flags = "E"; regex = "^#"; replace=""; },
		{ flags = "E"; regex = "<.{1,100}>"; replace=""; },
		{ flags = "EI"; regex = "http://[^ |\\]]{1,300}"; replace=" "; },
		{ flags = "EI"; regex = "File:[^ |\\]]{1,300}"; replace=" "; },
		{ flags = "E"; regex = "\\| *\n? *[a-zA-Z0-9]{1,25} *="; replace=" "; },
		{ flags = "EI"; regex = "^# ?redirect"; replace=""; },
		{ flags = "E"; regex = "\\{\\{[a-zA-Z#_-]+"; replace = " "; },
		{ flags = "E"; regex = "\\}\\}"; replace = ""; }
	);
	inputs:
	{
		current_text = "current_nomarkup_text";
		previous_text = "previous_nomarkup_text";
	};
};



########## Word Processors ##########

word_processors:
{
	module = "chain";
	chain = (
		"standard_word_separator",
		"two_word_separator", 
		"standard_word_diff",
		"two_word_diff",
		"noquote_word_diff",
		"misc_raw_word_metrics",
		"raw_word_category_finder",
		"word_normalizer",
		"reused_words",
		"word_category_finder"
	);
};

# The word_separator module breaks apart a string into word sets.
# Words are split on all characters except those specified in valid_word_chars.
# ignore_chars are not considered separators or valid word chars.  They can be
# part of a word only if they're surrounded by other valid_word_chars.  If they're
# surrounded on one or both sides by a non-valid word char, they are removed.
standard_word_separator:
{
	module = "word_separator";
	valid_word_chars = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM0123456789";
	ignore_chars = "'-";
	
	inputs:
	{
		current_nomarkup_text = "current_raw_words";
		previous_nomarkup_text = "previous_raw_words";
		current_noquote_text = "current_noquote_words";
		previous_noquote_text = "previous_noquote_words";
	};
};

# multi_word_separator is like word_separator, but groups words together.
# For example, if the input string is "hello world foo bar", the word set
# will contain "hello world", "world foo", and "foo bar".  The "num_words_together"
# option specifies how many words should be grouped together.  The standard_separator
# option specifies the single character that is used to separate words when
# concatenated together.
two_word_separator:
{
	module = "multi_word_separator";
	valid_word_chars = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM0123456789";
	ignore_chars = "'-";
	num_words_together = 2;
	standard_separator = " ";
	
	inputs:
	{
		#current_nomarkup_text = "current_raw_2words";
		#previous_nomarkup_text = "previous_raw_2words";
		current_noquote_text = "current_noquote_2words";
		previous_noquote_text = "previous_noquote_2words";
	};
};

# The "wordset_diff" module takes two word sets (current and previous) and figures
# out which words had to be added and removed to/from previous to get to current.
# The output word sets are added and removed.
standard_word_diff:
{
	module = "wordset_diff";
	current = "current_raw_words";
	previous = "previous_raw_words";
	added = "added_raw_words";
	removed = "removed_raw_words";
	# delta = "delta_raw_words";
};

noquote_word_diff:
{
	module = "wordset_diff";
	current = "current_noquote_words";
	previous = "previous_noquote_words";
	added = "added_noquote_words";
	removed = "removed_noquote_words";
	# delta = "delta_raw_words";
};

two_word_diff:
{
	module = "wordset_diff";
	#current = "current_raw_2words";
	#previous = "previous_raw_2words";
	#added = "added_raw_2words";
	#removed = "removed_raw_2words";
	current = "current_noquote_2words";
	previous = "previous_noquote_2words";
	added = "added_noquote_2words";
	removed = "removed_noquote_2words";
	# delta = "delta_raw_words";
};

# The wordset_compare module generates metrics by comparing two word sets.
# Currently the only metric is num_common_words, which is the number of words
# used in both firstset and secondset.
reused_words: {
	module = "wordset_compare";
	firstset = "previous_normalized_words";
	secondset = "added_normalized_words";
	num_common_words = "added_reused_words";
};

# This is the default configuration for the module "misc_raw_word_metrics".
# It generates some misc metrics for a word set.
# Current metrics include: word_count, distinct_word_count, all_lcase_word_count,
# all_ucase_word_count, max_all_ucase_word_len, first_ucase_word_count, middle_ucase_word_count,
# numeric_word_count, part_numeric_word_count, novowels_word_count, max_word_len,
# max_word_repeats, longest_char_run
misc_raw_word_metrics:
{
	inputs:
	{
		current_raw_words = "current_";
		previous_raw_words = "previous_";
		added_raw_words = "added_";
		removed_raw_words = "removed_";
	};
};

# Similar to character_replace, but works on individual words in a word set.
word_normalizer:
{
	module = "word_character_replace";
	
	find =    "QWERTYUIOPASDFGHJKLZXCVBNM";
	replace = "qwertyuiopasdfghjklzxcvbnm";
	keep = "1234567890qwertyuiopasdfghjklzxcvbnm ";
	
	inputs:
	{
		current_raw_words = "current_normalized_words";
		previous_raw_words = "previous_normalized_words";
		added_raw_words = "added_normalized_words";
		removed_raw_words = "removed_normalized_words";
		
		current_noquote_words = "current_normalized_noquote_words";
		previous_noquote_words = "previous_normalized_noquote_words";
		added_noquote_words = "added_normalized_noquote_words";
		removed_noquote_words = "removed_normalized_noquote_words";
		
		#current_raw_2words = "current_normalized_2words";
		#previous_raw_2words = "previous_normalized_2words";
		#added_raw_2words = "added_normalized_2words";
		#removed_raw_2words = "removed_normalized_2words";
		
		current_noquote_2words = "current_normalized_noquote_2words";
		previous_noquote_2words = "previous_normalized_noquote_2words";
		added_noquote_2words = "added_normalized_noquote_2words";
		removed_noquote_2words = "removed_normalized_noquote_2words";
	};
};

# The word_finder module tries to find occurrences of certain words in a word set.
# Metrics are the sum of occurrence counts of the words in the list.
word_category_finder:
{
	module = "word_finder";
	
	metrics:
	{
@include "conf/words.conf"
	};
	
	inputs:
	{
		current_normalized_noquote_words = "current_";
		previous_normalized_noquote_words = "previous_";
		added_normalized_noquote_words = "added_";
		#added_normalized_noquote_words = "added_noquote_";
		removed_normalized_noquote_words = "removed_";
	};
};


raw_word_category_finder:
{
	module = "word_finder";
	
	metrics:
	{
@include "conf/raw_words.conf"
	};
	
	inputs:
	{
		current_raw_words = "current_";
		previous_raw_words = "previous_";
		added_raw_words = "added_";
		removed_raw_words = "removed_";
	};
};

