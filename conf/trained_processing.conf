########## Bayesian Training ##########

make_bayes_training_data:
{
	module = "chain";
	chain = (
		"main_bayes_train_creator",
		"two_bayes_train_creator"
	);
};

# The bayesian_training_data_creator creates a bayesian training data
# file from a word set.
main_bayes_train_creator:
{
	module = "bayesian_training_data_creator";
	filename = "data/main_bayes_train.dat";
	#words = "added_normalized_words";
	words = "added_normalized_noquote_words";
	isvandprop = "isvandalism";
};

two_bayes_train_creator:
{
	module = "bayesian_training_data_creator";
	filename = "data/two_bayes_train.dat";
	#words = "added_normalized_2words";
	words = "added_normalized_noquote_2words";
	isvandprop = "isvandalism";
};


########## ANN Inputs and Training ##########

make_ann_training_data:
{
	module = "chain";
	chain = (
		"run_bayes",
		"ann_input_expressions",
		"main_ann_inputs",
		"main_ann_training_outputs",
		"main_ann_train_creator"
	);
};

# The expression_eval module uses mathematical expressions on existing properties.
# You can use any int or float property.  Also, string properties and word set
# properties can be used, when you append the _size suffix.  For example, with a
# string property called my_text, you can use my_text_size, which is the length
# of the string (note this isn't an actual property).  _size for a word set is
# the number of words in the set.  result_type can be either float or int.  Float
# sets can also be used, by appending an underscore and index.  For example,
# my_floats_3 accesses the fourth float in the my_floats float set.
ann_input_expressions:
{
	module = "expression_eval";
	result_type = "float";
	expressions:
	{
@include "conf/ann_input_expressions.conf"
	};
};

# The float_set_creator module creates a float set property (a list of float
# values) from a list of float properties.  If clip_low and clip_high are specified,
# values are clipped to within that range.
main_ann_inputs:
{
	module = "float_set_creator";
	output = "main_ann_inputs";
	clip_low = 0.0;
	clip_high = 1.0;
	properties:
	(
@include "conf/ann_input_list.conf"
	);
};

main_ann_training_outputs:
{
	module = "float_set_creator";
	output = "main_ann_outputs";
	clip_low = 0.0;
	clip_high = 1.0;
	properties:
	(
		"isvandalism"
	);
};

# The write_ann_training_data module creates a fann-format training data file
# from two float sets (input layer and output layer).
main_ann_train_creator:
{
	module = "write_ann_training_data";
	input_set = "main_ann_inputs";
	output_set = "main_ann_outputs";
	filename = "data/main_ann_train.dat";
};


########## Bayesian Running ##########

run_bayes:
{
	module = "chain";
	chain = (
		"main_bayes_scorer",
		"prev_bayes_scorer",
		"two_bayes_scorer",
		"raw_bayes_scorer"
	);
};

# The bayesian_scorer module runs a word set through a bayesian database and
# generates a score from 0 to 1.  numword_out specifies a property to store
# the number of words that contributed to the score.  min_edits specifies the
# minimum number of times the word must have occurred during training for it
# to be considered.  num_words specifies the maximum number of words to take
# into account for bayesian score calculation.  min_word_high_score and max_word_low_score
# specify the range for acceptable individual word scores for the word to
# be used.  probability_ranges generates integer metrics, each one containing
# the number of words that had individual word scores within the given range.
main_bayes_scorer:
{
	module = "bayesian_scorer";
	dbfile = "data/bayes.db";
	#input = "added_normalized_words";
	input = "added_normalized_noquote_words";
	output = "main_bayes_score";
	numwords_out = "main_bayes_nwords";
	min_edits = 4;
	num_words = 20;
	min_word_high_score = 0.85;
	max_word_low_score = 0.4;
	probability_ranges = {
		bayes_prob_range_top = (0.999, 1.0);
		bayes_prob_range_high = (0.94, 1.0);
		bayes_prob_range_mid = (0.88, 0.94);
		bayes_prob_range_low = (0.0, 0.10);
	};
};

raw_bayes_scorer:
{
	module = "bayesian_scorer";
	dbfile = "data/bayes.db";
	input = "added_normalized_words";
	#input = "added_normalized_noquote_words";
	output = "raw_bayes_score";
	numwords_out = "raw_bayes_nwords";
	min_edits = 4;
	num_words = 20;
};

prev_bayes_scorer:
{
	module = "bayesian_scorer";
	dbfile = "data/bayes.db";
	#input = "previous_normalized_words";
	input = "previous_normalized_noquote_words";
	output = "previous_bayes_score";
	numwords_out = "previous_bayes_nwords";
	min_edits = 4;
	num_words = 20;
};

two_bayes_scorer:
{
	module = "bayesian_scorer";
	dbfile = "data/two_bayes.db";
	#input = "added_normalized_2words";
	input = "added_normalized_noquote_2words";
	output = "two_bayes_score";
	numwords_out = "two_bayes_nwords";
	min_edits = 4;
	num_words = 20;
	min_word_high_score = 0.85;
	max_word_low_score = 0.4;
};


########## ANN Running ##########

run_main_ann:
{
	module = "chain";
	chain = (
		"run_bayes",
		"ann_input_expressions",
		"main_ann_inputs",
		"main_ann_runner",
		"main_ann_scorer"
	);
};

# Runs a float set through an ANN and generates an output float set
main_ann_runner:
{
	module = "run_ann";
	input_set = "main_ann_inputs";
	output_set = "main_ann_outputs";
	ann_file = "data/main_ann.fann";
};

main_ann_scorer:
{
	module = "expression_eval";
	result_type = "float";
	expressions: { main_ann_score = "main_ann_outputs_0"; };
};


